import asyncio
import json
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    BotCommand,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
)
from aiogram.utils.markdown import hbold, hlink

from config import BOT_TOKEN
from parser import parse_clothes

cur_time = datetime.now().strftime("%d_%m_%Y_%H_%M")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


async def set_main_menu(bot):
    await bot.set_my_commands(
        [
            BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand(command="/about", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
        ]
    )


@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.reply("–ì–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ")
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞üíÅ‚Äç‚ôÇÔ∏è")],
            [KeyboardButton(text="–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞üíÅ‚Äç‚ôÄÔ∏è")],
        ],
        resize_keyboard=True,
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ", reply_markup=keyboard)


@dp.message(Command("about"))
async def about(message: Message):
    text = f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –æ–¥–µ–∂–¥—ã —Å —Å–∞–π—Ç–∞ Ellesse –¥–ª—è –∂–µ–Ω—â–∏–Ω –∏ –º—É–∂—á–∏–Ω. –ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å - {hlink('sguschonka', 'https://github.com/sguschonka')}"
    await message.answer(text=text, parse_mode="HTML")


@dp.message(F.text == "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞üíÅ‚Äç‚ôÄÔ∏è")
async def women_cloth(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="XS", callback_data="w_size_XS"),
                InlineKeyboardButton(text="S", callback_data="w_size_S"),
                InlineKeyboardButton(text="M", callback_data="w_size_M"),
                InlineKeyboardButton(text="L", callback_data="w_size_L"),
                InlineKeyboardButton(text="XL", callback_data="w_size_XL"),
                InlineKeyboardButton(text="14", callback_data="w_size_14"),
                InlineKeyboardButton(text="12", callback_data="w_size_12"),
            ],
            [
                InlineKeyboardButton(text="6", callback_data="w_size_6"),
                InlineKeyboardButton(text="8", callback_data="w_size_8"),
                InlineKeyboardButton(text="8.0", callback_data="w_size_8.0"),
                InlineKeyboardButton(text="14.0", callback_data="w_size_14.0"),
            ],
            [
                InlineKeyboardButton(text="6.0", callback_data="w_size_6.0"),
                InlineKeyboardButton(text="18", callback_data="w_size_18"),
                InlineKeyboardButton(text="20", callback_data="w_size_20"),
                InlineKeyboardButton(text="22", callback_data="w_size_22"),
            ],
            [
                InlineKeyboardButton(text="16.0", callback_data="w_size_16.0"),
                InlineKeyboardButton(text="10.0", callback_data="w_size_10.0"),
                InlineKeyboardButton(text="12.0", callback_data="w_size_12.0"),
            ],
        ]
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä", reply_markup=keyboard)


@dp.message(F.text == "–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞üíÅ‚Äç‚ôÇÔ∏è")
async def men_cloth(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="XS", callback_data="m_size_XS"),
                InlineKeyboardButton(text="S", callback_data="m_size_S"),
                InlineKeyboardButton(text="M", callback_data="m_size_M"),
                InlineKeyboardButton(text="L", callback_data="m_size_L"),
                InlineKeyboardButton(text="XL", callback_data="m_size_XL"),
                InlineKeyboardButton(text="2XL", callback_data="m_size_2XL"),
                InlineKeyboardButton(text="3XL", callback_data="m_size_3XL"),
            ]
        ]
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä", reply_markup=keyboard)


@dp.callback_query(F.data.startswith("m_size_"))
async def process_size_mens(callback: CallbackQuery):
    size = callback.data.replace("m_size_", "", 1)
    await callback.message.answer(
        f"–í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä: {size}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )
    gender = "mens"
    try:
        await parse_clothes(size, gender)

        with open(f"result_{cur_time}.json", encoding="utf-8") as f:
            data = json.load(f)

        cards_text = ""
        for item in data:
            card = (
                f"{hlink(item.get('title'), item.get('link'))}\n"
                f"{hbold('–¶–µ–Ω–∞: ')} {item.get('price')}üí∏\n"
                f"{hbold('–†–∞–∑–º–µ—Ä: ')} {item.get('size')}\n"
            )
            cards_text += card

            if len(cards_text) >= 3000:
                await callback.message.answer(cards_text, parse_mode="HTML", disable_web_page_preview=True)
                cards_text = ""
                await asyncio.sleep(1)
        if cards_text:
            await callback.message.answer(cards_text, parse_mode="HTML", disable_web_page_preview=True)

        await callback.message.answer(
            "–û–¥–µ–∂–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∫–∞–ø–∏—Ç–∞–Ω! –•–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –º–Ω–µ –µ—â–µ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É?"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞!Error: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


@dp.callback_query(F.data.startswith("w_size_"))
async def process_size_womens(callback: CallbackQuery):
    size = callback.data.replace("w_size_", "", 1)
    await callback.message.answer(
        f"–í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä: {size}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )
    gender = "womens"
    try:
        await parse_clothes(size, gender)

        with open(f"result_{cur_time}.json", encoding="utf-8") as f:
            data = json.load(f)

        cards_text = ""
        for item in data:
            card = (
                f"{hlink(item.get('title'), item.get('link'))}\n"
                f"{hbold('–¶–µ–Ω–∞: ')} {item.get('price')}üí∏\n"
                f"{hbold('–†–∞–∑–º–µ—Ä: ')} {item.get('size')}\n"
            )
            cards_text += card

            if len(cards_text) >= 3000:
                await callback.message.answer(cards_text, parse_mode="HTML", disable_web_page_preview=True)
                cards_text = ""
                await asyncio.sleep(1)
        if cards_text:
            await callback.message.answer(cards_text, parse_mode="HTML", disable_web_page_preview=True)

        await callback.message.answer(
            "–û–¥–µ–∂–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∫–∞–ø–∏—Ç–∞–Ω! –•–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –º–Ω–µ –µ—â–µ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É?"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞!Error: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


async def main():
    await set_main_menu(bot)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
